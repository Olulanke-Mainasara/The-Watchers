import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";

import FormThemeToggler from "@/components/UI/Buttons/FormThemeToggler";
import { auth } from "@/firebase/client.config";
import { signInWithEmailAndPassword } from "firebase/auth";
import { Icons } from "@/components/UI/Icons";
import { useState } from "react";
import { FaArrowLeft } from "react-icons/fa";

import LoginImg from "../public/Auth/login.jpg";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);
  const router = useRouter();
  const { previous } = router.query;

  const handleSignIn = async (event) => {
    event.preventDefault();
    setError(false);
    setIsLoading(true);

    try {
      await signInWithEmailAndPassword(auth, email, password);
      if (router.asPath === "/profile") {
        router.reload();
      } else {
        router.push(previous);
      }
    } catch (error) {
      setIsLoading(false);
      setError(true);
      switch (error.message) {
        case "Firebase: Error (auth/wrong-password).":
          setErrorMessage("Invalid username or Password");
          break;
        case "Firebase: Error (auth/user-not-found).":
          setErrorMessage("No user exists with this email address");
          break;
        case "Firebase: Error (auth/network-request-failed).":
          setErrorMessage(
            "Network Disconnected, please check your internet connection",
          );
          break;

        default:
          setErrorMessage("Sign in error occurred, please retry");
          break;
      }
    }
  };

  return (
    <>
      <Head>
        <title>Login - The Watchers.</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-[100dvh] max-w-[1920px] mx-auto w-screen relative">
        <section className="relative xl:basis-1/2 basis-full">
          <Image
            src={LoginImg}
            fill
            sizes="(max-width: 767px) 100vw, (min-width: 768px) 50vw"
            priority
            placeholder="blur"
            alt="Login img"
          />
        </section>

        <form
          className="absolute top-0 w-full h-full overflow-scroll xl:basis-1/2 backdrop-blur-xl xl:static"
          onSubmit={handleSignIn}
        >
          <div className="flex items-center justify-center w-full min-h-[100dvh]">
            <section className="border border-black bg-white w-[90%] max-w-[450px] flex flex-col gap-5 p-5 pb-6 rounded-xl text-black my-10">
              <div className="flex items-center justify-between">
                <button
                  onClick={(e) => {
                    e.preventDefault();
                    router.back();
                  }}
                  className="flex items-center text-lg gap-2"
                >
                  <FaArrowLeft /> back
                </button>

                <FormThemeToggler />

                <Link
                  href={"/"}
                  className="px-8 py-3 text-white bg-black border border-black rounded-full duration-500 hover:bg-transparent hover:text-black"
                >
                  Home
                </Link>
              </div>

              <h2 className="text-4xl text-center xs:text-2xl">
                Welcome back!
              </h2>

              <label htmlFor="email">
                Email
                <input
                  id="email"
                  placeholder="john.doe@example.com"
                  type="email"
                  autoCapitalize="none"
                  autoComplete="email"
                  autoCorrect="off"
                  disabled={isLoading}
                  required
                  className="w-full h-12 pl-3 mt-2 text-black bg-transparent border border-black rounded disabled:opacity-50"
                  onChange={(event) => setEmail(event.target.value)}
                />
              </label>

              <label htmlFor="password" className="relative">
                Password{" "}
                <Link
                  href={"/forgotpassword"}
                  className="absolute right-0 underline"
                >
                  Forgot password
                </Link>
                <input
                  id="password"
                  placeholder="Your password"
                  type="password"
                  autoCapitalize="none"
                  autoComplete="current-password"
                  autoCorrect="off"
                  disabled={isLoading}
                  required
                  className="w-full h-12 pl-3 mt-2 text-black bg-transparent border border-black rounded disabled:opacity-50"
                  onChange={(event) => setPassword(event.target.value)}
                />
              </label>

              {error && (
                <div className="text-center text-red-500">{errorMessage}</div>
              )}

              <p className="text-center xs:text-xs">
                Don&apos;t have an account?&nbsp;
                <Link
                  className="font-bold"
                  href={`/signup?previous=${
                    router.asPath === "/profile"
                      ? "/profile"
                      : !previous
                      ? "/profile"
                      : previous
                  }`}
                >
                  Sign up
                </Link>
              </p>

              <button
                disabled={isLoading}
                className="flex items-center justify-center py-3 text-lg text-white bg-black border rounded-full duration-300 hover:bg-transparent hover:text-black hover:border-black"
                type="submit"
              >
                {isLoading && (
                  <Icons.spinner className="w-6 h-6 mr-2 animate-spin" />
                )}

                {error ? "Retry" : "Login"}
              </button>
            </section>
          </div>
        </form>
      </main>
    </>
  );
};

export default Login;
